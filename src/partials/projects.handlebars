<div id="projects" class="primary-content projects ten columns">

	<h1>Projects, Apps & Code</h1>
  <div>
    <h3 class="github-projects-title">Github Projects</h3>
    <ul class="github-projects">
    </ul>
  </div>

</div>


<script>
  var githubProjects = document.querySelector('.github-projects');
  if (typeof(githubProjects) != 'undefined' && githubProjects != null){
    populateGithubProjects();
  }

  function populateGithubProjects() {
    const root = 'https://api.github.com';

    fetch(root + '/users/chrisgreg/repos')
      .then(getRepos)
      .then(renderRepos)
			.then(renderMetaData)
			.then(getLanguageStats);

    function getRepos(response) {
      return response.json().then((json) => {
        var repos = formatRepos(json);
        return repos;
      })
    }

    function renderRepos(repos) {
      for(var i = 0; i < repos.length; ++i) {
        var element = document.createElement('li');
        element.innerHTML = '<div class="github-project"><h4 class="title"><span>'
															+ repos[i].name + '</span></h4><div class="description">'
															+ repos[i].description + '</div><div class="stats"><div class="language">'+ repos[i].language+'</div><div class="stars">'+ repos[i].stars + ' stars</div><div class="url"><a href="'+ repos[i].url +'">Repository Link</a></div></div></div>';
        githubProjects.appendChild(element);
      }
			return repos;
    }

		function renderMetaData(repos) {
			var githubProjectsTitle = document.querySelector('.github-projects-title');
			githubProjectsTitle.innerHTML = githubProjectsTitle.innerHTML + ' - ' + repos.length + ' projects';
			return repos;
		}

		function getLanguageStats(repos) {
			var languages = Object.keys(repos).map(a => repos[a].language)
			var languageOccurances = new Map([...new Set(languages)].map(
        x => [x, languages.filter(y => y === x).length]
    	));

			console.log(languageOccurances)

			return repos;
		}

    function formatRepos(json) {
      return json.map(repo => {
        return {
          id: repo.id,
          created_date: repo.created_at,
          url: repo.html_url,
          description: repo.description || 'No description available',
          name: repo.name,
          stars: repo.stargazers_count,
          watchers: repo.watchers,
					language: repo.language
        }
      }).sort((a,b) => {
        return new Date(b.created_date) - new Date(a.created_date);
      })
    }
  }
</script>
